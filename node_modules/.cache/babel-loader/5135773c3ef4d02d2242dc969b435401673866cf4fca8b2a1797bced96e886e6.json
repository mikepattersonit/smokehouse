{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mpatterson\\\\Documents\\\\smokehouse\\\\smokehouse\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport SensorDataTable from './components/SensorDataTable/SensorDataTable';\nimport Chart from './components/Chart/Chart';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [mockData, setMockData] = useState([]);\n  const [isSessionActive, setIsSessionActive] = useState(false);\n  const [sessionStartTime, setSessionStartTime] = useState(null);\n  const [lastMessageTime, setLastMessageTime] = useState(null);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // Simulate receiving a new message\n      const newMessage = {\n        timestamp: new Date().toLocaleTimeString(),\n        value: Math.random() * 100\n      };\n      setMockData(prevData => [...prevData, newMessage]);\n      setLastMessageTime(new Date());\n      if (!isSessionActive) {\n        setIsSessionActive(true);\n        setSessionStartTime(new Date());\n      }\n    }, 5000); // Simulate new data every 5 seconds\n\n    return () => clearInterval(interval); // Cleanup interval on unmount\n  }, [isSessionActive]);\n  useEffect(() => {\n    if (isSessionActive && lastMessageTime) {\n      const timeout = setTimeout(() => {\n        const now = new Date();\n        if (now - lastMessageTime > 45 * 60 * 1000) {\n          setIsSessionActive(false);\n        }\n      }, 1000);\n      return () => clearTimeout(timeout);\n    }\n  }, [lastMessageTime, isSessionActive]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Smokehouse Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: isSessionActive ? `Session Active (Started: ${sessionStartTime === null || sessionStartTime === void 0 ? void 0 : sessionStartTime.toLocaleString()})` : 'No Active Session'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: isSessionActive ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(SensorDataTable, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Chart, {\n          data: mockData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Waiting for smokehouse to turn on...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WLKkJ9m55szOkTpIlwcbJVsafT0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SensorDataTable","Chart","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","mockData","setMockData","isSessionActive","setIsSessionActive","sessionStartTime","setSessionStartTime","lastMessageTime","setLastMessageTime","interval","setInterval","newMessage","timestamp","Date","toLocaleTimeString","value","Math","random","prevData","clearInterval","timeout","setTimeout","now","clearTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleString","data","_c","$RefreshReg$"],"sources":["C:/Users/mpatterson/Documents/smokehouse/smokehouse/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport SensorDataTable from './components/SensorDataTable/SensorDataTable';\r\nimport Chart from './components/Chart/Chart';\r\n\r\nfunction App() {\r\n  const [mockData, setMockData] = useState([]);\r\n  const [isSessionActive, setIsSessionActive] = useState(false);\r\n  const [sessionStartTime, setSessionStartTime] = useState(null);\r\n  const [lastMessageTime, setLastMessageTime] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      // Simulate receiving a new message\r\n      const newMessage = {\r\n        timestamp: new Date().toLocaleTimeString(),\r\n        value: Math.random() * 100,\r\n      };\r\n\r\n      setMockData((prevData) => [...prevData, newMessage]);\r\n      setLastMessageTime(new Date());\r\n\r\n      if (!isSessionActive) {\r\n        setIsSessionActive(true);\r\n        setSessionStartTime(new Date());\r\n      }\r\n    }, 5000); // Simulate new data every 5 seconds\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [isSessionActive]);\r\n\r\n  useEffect(() => {\r\n    if (isSessionActive && lastMessageTime) {\r\n      const timeout = setTimeout(() => {\r\n        const now = new Date();\r\n        if (now - lastMessageTime > 45 * 60 * 1000) {\r\n          setIsSessionActive(false);\r\n        }\r\n      }, 1000);\r\n\r\n      return () => clearTimeout(timeout);\r\n    }\r\n  }, [lastMessageTime, isSessionActive]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Smokehouse Dashboard</h1>\r\n        <p>\r\n          {isSessionActive\r\n            ? `Session Active (Started: ${sessionStartTime?.toLocaleString()})`\r\n            : 'No Active Session'}\r\n        </p>\r\n      </header>\r\n      <main>\r\n        {isSessionActive ? (\r\n          <>\r\n            <SensorDataTable />\r\n            <Chart data={mockData} />\r\n          </>\r\n        ) : (\r\n          <p>Waiting for smokehouse to turn on...</p>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}