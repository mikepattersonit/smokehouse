{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mpatterson\\\\Documents\\\\smokehouse\\\\smokehouse\\\\src\\\\components\\\\Chart\\\\Chart.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, PointElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Explicitly register components and scales\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(LineElement, CategoryScale, LinearScale, PointElement, Title, Tooltip, Legend);\nconst Chart = ({\n  data\n}) => {\n  _s();\n  // Extract sensor IDs dynamically from data\n  const sensorKeys = Object.keys(data[0] || {}).filter(key => key !== 'timestamp' && key !== 'session_id');\n  const [selectedSensor, setSelectedSensor] = useState(sensorKeys[0] || '');\n  const chartData = {\n    labels: data.map(point => new Date(point.timestamp).toLocaleString()),\n    // X-axis: Time (formatted)\n    datasets: selectedSensor ? [{\n      label: selectedSensor.replace(/_/g, ' '),\n      // Format sensor name for display\n      data: data.map(point => point[selectedSensor] || 0),\n      // Y-axis: Sensor Values\n      borderColor: 'rgba(75,192,192,1)',\n      backgroundColor: 'rgba(75,192,192,0.2)',\n      tension: 0.4\n    }] : []\n  };\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            return `${context.dataset.label}: ${context.raw}`;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Time'\n        },\n        ticks: {\n          maxRotation: 45,\n          minRotation: 45\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Value'\n        },\n        beginAtZero: true\n      }\n    }\n  };\n  const handleSensorChange = e => {\n    setSelectedSensor(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Historical Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"sensor-select\",\n      children: \"Select Sensor:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"sensor-select\",\n      value: selectedSensor,\n      onChange: handleSensorChange,\n      style: {\n        margin: '10px'\n      },\n      children: sensorKeys.map(sensor => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: sensor,\n        children: [sensor.replace(/_/g, ' '), \" \"]\n      }, sensor, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), selectedSensor ? /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please select a sensor to view data.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(Chart, \"ywdEsqUnEhMKgDrsKIXHvW1hALg=\");\n_c = Chart;\nexport default Chart;\nvar _c;\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["React","useState","Line","Chart","ChartJS","LineElement","CategoryScale","LinearScale","PointElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","data","_s","sensorKeys","Object","keys","filter","key","selectedSensor","setSelectedSensor","chartData","labels","map","point","Date","timestamp","toLocaleString","datasets","label","replace","borderColor","backgroundColor","tension","options","responsive","plugins","legend","position","tooltip","callbacks","context","dataset","raw","scales","x","title","display","text","ticks","maxRotation","minRotation","y","beginAtZero","handleSensorChange","e","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","style","margin","sensor","_c","$RefreshReg$"],"sources":["C:/Users/mpatterson/Documents/smokehouse/smokehouse/src/components/Chart/Chart.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  LineElement,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\n// Explicitly register components and scales\r\nChartJS.register(LineElement, CategoryScale, LinearScale, PointElement, Title, Tooltip, Legend);\r\n\r\nconst Chart = ({ data }) => {\r\n  // Extract sensor IDs dynamically from data\r\n  const sensorKeys = Object.keys(data[0] || {}).filter(\r\n    (key) => key !== 'timestamp' && key !== 'session_id'\r\n  );\r\n\r\n  const [selectedSensor, setSelectedSensor] = useState(sensorKeys[0] || '');\r\n\r\n  const chartData = {\r\n    labels: data.map((point) => new Date(point.timestamp).toLocaleString()), // X-axis: Time (formatted)\r\n    datasets: selectedSensor\r\n      ? [\r\n          {\r\n            label: selectedSensor.replace(/_/g, ' '), // Format sensor name for display\r\n            data: data.map((point) => point[selectedSensor] || 0), // Y-axis: Sensor Values\r\n            borderColor: 'rgba(75,192,192,1)',\r\n            backgroundColor: 'rgba(75,192,192,0.2)',\r\n            tension: 0.4,\r\n          },\r\n        ]\r\n      : [],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function (context) {\r\n            return `${context.dataset.label}: ${context.raw}`;\r\n          },\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      x: {\r\n        title: { display: true, text: 'Time' },\r\n        ticks: {\r\n          maxRotation: 45,\r\n          minRotation: 45,\r\n        },\r\n      },\r\n      y: {\r\n        title: { display: true, text: 'Value' },\r\n        beginAtZero: true,\r\n      },\r\n    },\r\n  };\r\n\r\n  const handleSensorChange = (e) => {\r\n    setSelectedSensor(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Historical Data</h2>\r\n      <label htmlFor=\"sensor-select\">Select Sensor:</label>\r\n      <select\r\n        id=\"sensor-select\"\r\n        value={selectedSensor}\r\n        onChange={handleSensorChange}\r\n        style={{ margin: '10px' }}\r\n      >\r\n        {sensorKeys.map((sensor) => (\r\n          <option key={sensor} value={sensor}>\r\n            {sensor.replace(/_/g, ' ')} {/* Display friendly names */}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      {selectedSensor ? (\r\n        <Line data={chartData} options={options} />\r\n      ) : (\r\n        <p>Please select a sensor to view data.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}