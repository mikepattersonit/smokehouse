{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mpatterson\\\\Documents\\\\smokehouse\\\\smokehouse\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport AWS from 'aws-sdk';\nimport './App.css';\nimport SensorDataTable from './components/SensorDataTable/SensorDataTable';\nimport Chart from './components/Chart/Chart';\nimport Alerts from './components/Alerts/Alerts';\n\n// Configure AWS SDK\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nAWS.config.update({\n  region: 'us-east-2' // Update for your AWS region\n});\nconst sns = new AWS.SNS();\nfunction App() {\n  _s();\n  const [mockData, setMockData] = useState([]);\n  const [isSessionActive, setIsSessionActive] = useState(false);\n  const [sessionStartTime, setSessionStartTime] = useState(null);\n  const [lastMessageTime, setLastMessageTime] = useState(null);\n  const [alerts, setAlerts] = useState({});\n  const [mobileNumber, setMobileNumber] = useState('');\n  const [subscribedNumbers, setSubscribedNumbers] = useState([]);\n  const topicArn = 'arn:aws:sns:us-east-2:<account_id>:SmokehouseAlerts'; // Replace <account_id> with your AWS account ID\n\n  // Simulate receiving sensor data\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const newMessage = [{\n        id: 'internal_temp',\n        label: 'Internal Temp',\n        value: Math.random() * 100\n      }, {\n        id: 'sensor0',\n        label: 'Bottom Temp',\n        value: Math.random() * 100\n      }, {\n        id: 'sensor1',\n        label: 'Middle Temp',\n        value: Math.random() * 100\n      }, {\n        id: 'sensor2',\n        label: 'Top Temp',\n        value: Math.random() * 100\n      }, {\n        id: 'humidity',\n        label: 'Humidity (%)',\n        value: Math.random() * 100\n      }, {\n        id: 'smoke_ppm',\n        label: 'Smoke PPM',\n        value: Math.random() * 100\n      }];\n      setMockData(newMessage); // Replace all mock data with new data for simplicity\n      setLastMessageTime(new Date());\n      if (!isSessionActive) {\n        setIsSessionActive(true);\n        setSessionStartTime(new Date());\n      }\n    }, 5000);\n    return () => clearInterval(interval);\n  }, [isSessionActive]);\n\n  // Handle session timeout\n  useEffect(() => {\n    if (isSessionActive && lastMessageTime) {\n      const timeout = setTimeout(() => {\n        const now = new Date();\n        if (now - lastMessageTime > 45 * 60 * 1000) {\n          setIsSessionActive(false);\n        }\n      }, 1000);\n      return () => clearTimeout(timeout);\n    }\n  }, [lastMessageTime, isSessionActive]);\n\n  // Handle alerts\n  useEffect(() => {\n    if (isSessionActive && mockData.length > 0) {\n      mockData.forEach(dataPoint => {\n        const alert = alerts[dataPoint.id];\n        if (alert) {\n          if (alert.min !== null && dataPoint.value < alert.min || alert.max !== null && dataPoint.value > alert.max) {\n            const message = `${alert.label} value (${dataPoint.value.toFixed(2)}) breached thresholds: Min (${alert.min}), Max (${alert.max}).`;\n            sendAlert(message);\n          }\n        }\n      });\n    }\n  }, [mockData, alerts, isSessionActive]);\n\n  // Function to send alerts via AWS SNS\n  const sendAlert = message => {\n    const params = {\n      Message: message,\n      TopicArn: topicArn\n    };\n    sns.publish(params, (err, data) => {\n      if (err) {\n        console.error('Error sending alert:', err);\n      } else {\n        console.log('Alert sent:', data);\n      }\n    });\n  };\n\n  // Add new alert thresholds\n  const handleSetAlerts = thresholds => {\n    setAlerts(prev => ({\n      ...prev,\n      ...thresholds\n    }));\n  };\n\n  // Remove an alert\n  const handleRemoveAlert = sensorId => {\n    setAlerts(prev => {\n      const updated = {\n        ...prev\n      };\n      delete updated[sensorId];\n      return updated;\n    });\n  };\n\n  // Subscribe a new mobile number\n  const handleSubscribe = e => {\n    e.preventDefault();\n    if (!mobileNumber) {\n      alert('Please enter a valid mobile number');\n      return;\n    }\n    const params = {\n      Protocol: 'SMS',\n      TopicArn: topicArn,\n      Endpoint: mobileNumber\n    };\n    sns.subscribe(params, (err, data) => {\n      if (err) {\n        console.error('Error subscribing number:', err);\n        alert('Failed to subscribe the number. Check the console for details.');\n      } else {\n        console.log('Successfully subscribed:', data);\n        setSubscribedNumbers(prev => [...prev, mobileNumber]);\n        setMobileNumber('');\n        alert(`Number ${mobileNumber} subscribed successfully!`);\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Smokehouse Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: isSessionActive ? `Session Active (Started: ${sessionStartTime === null || sessionStartTime === void 0 ? void 0 : sessionStartTime.toLocaleString()})` : 'No Active Session'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: isSessionActive ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(SensorDataTable, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Chart, {\n          data: mockData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Alerts, {\n          sensors: mockData,\n          alerts: alerts,\n          onSetAlert: handleSetAlerts,\n          onRemoveAlert: handleRemoveAlert\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Subscribe to Alerts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubscribe,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Mobile Number:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"tel\",\n              value: mobileNumber,\n              onChange: e => setMobileNumber(e.target.value),\n              placeholder: \"+1234567890\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Subscribe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Subscribed Numbers:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: subscribedNumbers.map((number, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: number\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Waiting for smokehouse to turn on...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"R2U67+gnUeWA9XG7GFG1+/7HlDg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","AWS","SensorDataTable","Chart","Alerts","jsxDEV","_jsxDEV","Fragment","_Fragment","config","update","region","sns","SNS","App","_s","mockData","setMockData","isSessionActive","setIsSessionActive","sessionStartTime","setSessionStartTime","lastMessageTime","setLastMessageTime","alerts","setAlerts","mobileNumber","setMobileNumber","subscribedNumbers","setSubscribedNumbers","topicArn","interval","setInterval","newMessage","id","label","value","Math","random","Date","clearInterval","timeout","setTimeout","now","clearTimeout","length","forEach","dataPoint","alert","min","max","message","toFixed","sendAlert","params","Message","TopicArn","publish","err","data","console","error","log","handleSetAlerts","thresholds","prev","handleRemoveAlert","sensorId","updated","handleSubscribe","e","preventDefault","Protocol","Endpoint","subscribe","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleString","sensors","onSetAlert","onRemoveAlert","onSubmit","type","onChange","target","placeholder","required","map","number","index","_c","$RefreshReg$"],"sources":["C:/Users/mpatterson/Documents/smokehouse/smokehouse/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport AWS from 'aws-sdk';\r\nimport './App.css';\r\nimport SensorDataTable from './components/SensorDataTable/SensorDataTable';\r\nimport Chart from './components/Chart/Chart';\r\nimport Alerts from './components/Alerts/Alerts';\r\n\r\n// Configure AWS SDK\r\nAWS.config.update({\r\n  region: 'us-east-2', // Update for your AWS region\r\n});\r\n\r\nconst sns = new AWS.SNS();\r\n\r\nfunction App() {\r\n  const [mockData, setMockData] = useState([]);\r\n  const [isSessionActive, setIsSessionActive] = useState(false);\r\n  const [sessionStartTime, setSessionStartTime] = useState(null);\r\n  const [lastMessageTime, setLastMessageTime] = useState(null);\r\n  const [alerts, setAlerts] = useState({});\r\n  const [mobileNumber, setMobileNumber] = useState('');\r\n  const [subscribedNumbers, setSubscribedNumbers] = useState([]);\r\n\r\n  const topicArn = 'arn:aws:sns:us-east-2:<account_id>:SmokehouseAlerts'; // Replace <account_id> with your AWS account ID\r\n\r\n  // Simulate receiving sensor data\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      const newMessage = [\r\n        { id: 'internal_temp', label: 'Internal Temp', value: Math.random() * 100 },\r\n        { id: 'sensor0', label: 'Bottom Temp', value: Math.random() * 100 },\r\n        { id: 'sensor1', label: 'Middle Temp', value: Math.random() * 100 },\r\n        { id: 'sensor2', label: 'Top Temp', value: Math.random() * 100 },\r\n        { id: 'humidity', label: 'Humidity (%)', value: Math.random() * 100 },\r\n        { id: 'smoke_ppm', label: 'Smoke PPM', value: Math.random() * 100 },\r\n      ];\r\n\r\n      setMockData(newMessage); // Replace all mock data with new data for simplicity\r\n      setLastMessageTime(new Date());\r\n\r\n      if (!isSessionActive) {\r\n        setIsSessionActive(true);\r\n        setSessionStartTime(new Date());\r\n      }\r\n    }, 5000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [isSessionActive]);\r\n\r\n  // Handle session timeout\r\n  useEffect(() => {\r\n    if (isSessionActive && lastMessageTime) {\r\n      const timeout = setTimeout(() => {\r\n        const now = new Date();\r\n        if (now - lastMessageTime > 45 * 60 * 1000) {\r\n          setIsSessionActive(false);\r\n        }\r\n      }, 1000);\r\n\r\n      return () => clearTimeout(timeout);\r\n    }\r\n  }, [lastMessageTime, isSessionActive]);\r\n\r\n  // Handle alerts\r\n  useEffect(() => {\r\n    if (isSessionActive && mockData.length > 0) {\r\n      mockData.forEach((dataPoint) => {\r\n        const alert = alerts[dataPoint.id];\r\n        if (alert) {\r\n          if (\r\n            (alert.min !== null && dataPoint.value < alert.min) ||\r\n            (alert.max !== null && dataPoint.value > alert.max)\r\n          ) {\r\n            const message = `${alert.label} value (${dataPoint.value.toFixed(\r\n              2\r\n            )}) breached thresholds: Min (${alert.min}), Max (${alert.max}).`;\r\n            sendAlert(message);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }, [mockData, alerts, isSessionActive]);\r\n\r\n  // Function to send alerts via AWS SNS\r\n  const sendAlert = (message) => {\r\n    const params = {\r\n      Message: message,\r\n      TopicArn: topicArn,\r\n    };\r\n\r\n    sns.publish(params, (err, data) => {\r\n      if (err) {\r\n        console.error('Error sending alert:', err);\r\n      } else {\r\n        console.log('Alert sent:', data);\r\n      }\r\n    });\r\n  };\r\n\r\n  // Add new alert thresholds\r\n  const handleSetAlerts = (thresholds) => {\r\n    setAlerts((prev) => ({ ...prev, ...thresholds }));\r\n  };\r\n\r\n  // Remove an alert\r\n  const handleRemoveAlert = (sensorId) => {\r\n    setAlerts((prev) => {\r\n      const updated = { ...prev };\r\n      delete updated[sensorId];\r\n      return updated;\r\n    });\r\n  };\r\n\r\n  // Subscribe a new mobile number\r\n  const handleSubscribe = (e) => {\r\n    e.preventDefault();\r\n    if (!mobileNumber) {\r\n      alert('Please enter a valid mobile number');\r\n      return;\r\n    }\r\n\r\n    const params = {\r\n      Protocol: 'SMS',\r\n      TopicArn: topicArn,\r\n      Endpoint: mobileNumber,\r\n    };\r\n\r\n    sns.subscribe(params, (err, data) => {\r\n      if (err) {\r\n        console.error('Error subscribing number:', err);\r\n        alert('Failed to subscribe the number. Check the console for details.');\r\n      } else {\r\n        console.log('Successfully subscribed:', data);\r\n        setSubscribedNumbers((prev) => [...prev, mobileNumber]);\r\n        setMobileNumber('');\r\n        alert(`Number ${mobileNumber} subscribed successfully!`);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Smokehouse Dashboard</h1>\r\n        <p>\r\n          {isSessionActive\r\n            ? `Session Active (Started: ${sessionStartTime?.toLocaleString()})`\r\n            : 'No Active Session'}\r\n        </p>\r\n      </header>\r\n      <main>\r\n        {isSessionActive ? (\r\n          <>\r\n            <SensorDataTable />\r\n            <Chart data={mockData} />\r\n            <Alerts\r\n              sensors={mockData}\r\n              alerts={alerts}\r\n              onSetAlert={handleSetAlerts}\r\n              onRemoveAlert={handleRemoveAlert}\r\n            />\r\n            <h3>Subscribe to Alerts</h3>\r\n            <form onSubmit={handleSubscribe}>\r\n              <label>\r\n                Mobile Number:\r\n                <input\r\n                  type=\"tel\"\r\n                  value={mobileNumber}\r\n                  onChange={(e) => setMobileNumber(e.target.value)}\r\n                  placeholder=\"+1234567890\"\r\n                  required\r\n                />\r\n              </label>\r\n              <button type=\"submit\">Subscribe</button>\r\n            </form>\r\n            <h4>Subscribed Numbers:</h4>\r\n            <ul>\r\n              {subscribedNumbers.map((number, index) => (\r\n                <li key={index}>{number}</li>\r\n              ))}\r\n            </ul>\r\n          </>\r\n        ) : (\r\n          <p>Waiting for smokehouse to turn on...</p>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}