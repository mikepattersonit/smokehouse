{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mpatterson\\\\Documents\\\\smokehouse\\\\smokehouse\\\\src\\\\components\\\\MeatAssignment\\\\MeatAssignment.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MeatAssignment = ({\n  probes,\n  meatTypes,\n  onAssignMeat\n}) => {\n  _s();\n  const [selectedProbes, setSelectedProbes] = useState([]);\n  const [selectedMeat, setSelectedMeat] = useState('');\n  const [weight, setWeight] = useState('');\n  const handleProbeSelection = probeId => {\n    setSelectedProbes(prev => {\n      if (prev.includes(probeId)) {\n        // Remove probe if already selected\n        return prev.filter(id => id !== probeId);\n      } else if (prev.length < 3) {\n        // Add probe if less than 3 are selected\n        return [...prev, probeId];\n      } else {\n        alert('You can assign up to 3 probes only.');\n        return prev;\n      }\n    });\n  };\n  const handleAssign = e => {\n    e.preventDefault();\n    if (selectedProbes.length === 0 || !selectedMeat || !weight) {\n      alert('Please fill out all fields.');\n      return;\n    }\n    onAssignMeat({\n      probes: selectedProbes,\n      meat: selectedMeat,\n      weight: parseFloat(weight)\n    });\n\n    // Reset form\n    setSelectedProbes([]);\n    setSelectedMeat('');\n    setWeight('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Assign Meat to Probes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleAssign,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Select Probes:\", /*#__PURE__*/_jsxDEV(\"div\", {\n          children: probes.map(probe => /*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              marginRight: '10px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              value: probe.id,\n              checked: selectedProbes.includes(probe.id),\n              onChange: () => handleProbeSelection(probe.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 17\n            }, this), probe.label]\n          }, probe.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Select Meat Type:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedMeat,\n          onChange: e => setSelectedMeat(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select meat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), meatTypes.map(meat => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: meat.name,\n            children: meat.name\n          }, meat.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Enter Weight (lbs):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: weight,\n          onChange: e => setWeight(e.target.value),\n          placeholder: \"e.g., 5.5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Assign\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(MeatAssignment, \"pcj0a7dx1heU6ftxmity/cdTxxw=\");\n_c = MeatAssignment;\nexport default MeatAssignment;\nvar _c;\n$RefreshReg$(_c, \"MeatAssignment\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MeatAssignment","probes","meatTypes","onAssignMeat","_s","selectedProbes","setSelectedProbes","selectedMeat","setSelectedMeat","weight","setWeight","handleProbeSelection","probeId","prev","includes","filter","id","length","alert","handleAssign","e","preventDefault","meat","parseFloat","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","map","probe","style","marginRight","type","value","checked","onChange","label","target","name","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/mpatterson/Documents/smokehouse/smokehouse/src/components/MeatAssignment/MeatAssignment.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst MeatAssignment = ({ probes, meatTypes, onAssignMeat }) => {\r\n  const [selectedProbes, setSelectedProbes] = useState([]);\r\n  const [selectedMeat, setSelectedMeat] = useState('');\r\n  const [weight, setWeight] = useState('');\r\n\r\n  const handleProbeSelection = (probeId) => {\r\n    setSelectedProbes((prev) => {\r\n      if (prev.includes(probeId)) {\r\n        // Remove probe if already selected\r\n        return prev.filter((id) => id !== probeId);\r\n      } else if (prev.length < 3) {\r\n        // Add probe if less than 3 are selected\r\n        return [...prev, probeId];\r\n      } else {\r\n        alert('You can assign up to 3 probes only.');\r\n        return prev;\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleAssign = (e) => {\r\n    e.preventDefault();\r\n    if (selectedProbes.length === 0 || !selectedMeat || !weight) {\r\n      alert('Please fill out all fields.');\r\n      return;\r\n    }\r\n\r\n    onAssignMeat({\r\n      probes: selectedProbes,\r\n      meat: selectedMeat,\r\n      weight: parseFloat(weight),\r\n    });\r\n\r\n    // Reset form\r\n    setSelectedProbes([]);\r\n    setSelectedMeat('');\r\n    setWeight('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Assign Meat to Probes</h2>\r\n      <form onSubmit={handleAssign}>\r\n        <label>\r\n          Select Probes:\r\n          <div>\r\n            {probes.map((probe) => (\r\n              <label key={probe.id} style={{ marginRight: '10px' }}>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  value={probe.id}\r\n                  checked={selectedProbes.includes(probe.id)}\r\n                  onChange={() => handleProbeSelection(probe.id)}\r\n                />\r\n                {probe.label}\r\n              </label>\r\n            ))}\r\n          </div>\r\n        </label>\r\n        <br />\r\n        <label>\r\n          Select Meat Type:\r\n          <select\r\n            value={selectedMeat}\r\n            onChange={(e) => setSelectedMeat(e.target.value)}\r\n          >\r\n            <option value=\"\">Select meat</option>\r\n            {meatTypes.map((meat) => (\r\n              <option key={meat.id} value={meat.name}>\r\n                {meat.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n        <br />\r\n        <label>\r\n          Enter Weight (lbs):\r\n          <input\r\n            type=\"number\"\r\n            value={weight}\r\n            onChange={(e) => setWeight(e.target.value)}\r\n            placeholder=\"e.g., 5.5\"\r\n          />\r\n        </label>\r\n        <br />\r\n        <button type=\"submit\">Assign</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MeatAssignment;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}