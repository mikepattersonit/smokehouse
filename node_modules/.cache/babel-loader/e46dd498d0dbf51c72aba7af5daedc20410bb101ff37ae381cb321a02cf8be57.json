{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mpatterson\\\\Documents\\\\smokehouse\\\\smokehouse\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport AWS from 'aws-sdk';\nimport './App.css';\nimport SensorDataTable from './components/SensorDataTable/SensorDataTable';\nimport Chart from './components/Chart/Chart';\nimport Alerts from './components/Alerts/Alerts';\nimport MeatAssignment from './components/MeatAssignment/MeatAssignment';\n\n// Configure AWS SDK\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nAWS.config.update({\n  region: 'us-east-2' // Update for your AWS region\n});\nconst sns = new AWS.SNS();\nfunction App() {\n  _s();\n  const [mockData, setMockData] = useState([]);\n  const [isSessionActive, setIsSessionActive] = useState(false);\n  const [sessionStartTime, setSessionStartTime] = useState(null);\n  const [lastMessageTime, setLastMessageTime] = useState(null);\n  const [alerts, setAlerts] = useState({});\n  const [mobileNumber, setMobileNumber] = useState('');\n  const [subscribedNumbers, setSubscribedNumbers] = useState([]);\n  const [assignedMeat, setAssignedMeat] = useState([]);\n  const topicArn = 'arn:aws:sns:us-east-2:<account_id>:SmokehouseAlerts'; // Replace <account_id> with your AWS account ID\n\n  const mockProbes = [{\n    id: 'probe1',\n    label: 'Probe 1'\n  }, {\n    id: 'probe2',\n    label: 'Probe 2'\n  }, {\n    id: 'probe3',\n    label: 'Probe 3'\n  }];\n  const mockMeatTypes = [{\n    id: 1,\n    name: 'Brisket'\n  }, {\n    id: 2,\n    name: 'Pork Shoulder'\n  }, {\n    id: 3,\n    name: 'Ribs'\n  }, {\n    id: 4,\n    name: 'Chicken'\n  }, {\n    id: 5,\n    name: 'Turkey'\n  }];\n\n  // Simulate receiving sensor data\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const newMessage = [{\n        id: 'internal_temp',\n        label: 'Internal Temp',\n        value: Math.random() * 100\n      }, {\n        id: 'sensor0',\n        label: 'Bottom Temp',\n        value: Math.random() * 100\n      }, {\n        id: 'sensor1',\n        label: 'Middle Temp',\n        value: Math.random() * 100\n      }, {\n        id: 'sensor2',\n        label: 'Top Temp',\n        value: Math.random() * 100\n      }, {\n        id: 'humidity',\n        label: 'Humidity (%)',\n        value: Math.random() * 100\n      }, {\n        id: 'smoke_ppm',\n        label: 'Smoke PPM',\n        value: Math.random() * 100\n      }];\n      setMockData(newMessage); // Replace all mock data with new data for simplicity\n      setLastMessageTime(new Date());\n      if (!isSessionActive) {\n        setIsSessionActive(true);\n        setSessionStartTime(new Date());\n      }\n    }, 5000);\n    return () => clearInterval(interval);\n  }, [isSessionActive]);\n\n  // Handle session timeout\n  useEffect(() => {\n    if (isSessionActive && lastMessageTime) {\n      const timeout = setTimeout(() => {\n        const now = new Date();\n        if (now - lastMessageTime > 45 * 60 * 1000) {\n          setIsSessionActive(false);\n        }\n      }, 1000);\n      return () => clearTimeout(timeout);\n    }\n  }, [lastMessageTime, isSessionActive]);\n\n  // Handle alerts\n  useEffect(() => {\n    if (isSessionActive && mockData.length > 0) {\n      mockData.forEach(dataPoint => {\n        const alert = alerts[dataPoint.id];\n        if (alert) {\n          if (alert.min !== null && dataPoint.value < alert.min || alert.max !== null && dataPoint.value > alert.max) {\n            const message = `${alert.label} value (${dataPoint.value.toFixed(2)}) breached thresholds: Min (${alert.min}), Max (${alert.max}).`;\n            sendAlert(message);\n          }\n        }\n      });\n    }\n  }, [mockData, alerts, isSessionActive]);\n\n  // Function to send alerts via AWS SNS\n  const sendAlert = message => {\n    const params = {\n      Message: message,\n      TopicArn: topicArn\n    };\n    sns.publish(params, (err, data) => {\n      if (err) {\n        console.error('Error sending alert:', err);\n      } else {\n        console.log('Alert sent:', data);\n      }\n    });\n  };\n\n  // Add new alert thresholds\n  const handleSetAlerts = thresholds => {\n    setAlerts(prev => ({\n      ...prev,\n      ...thresholds\n    }));\n  };\n\n  // Remove an alert\n  const handleRemoveAlert = sensorId => {\n    setAlerts(prev => {\n      const updated = {\n        ...prev\n      };\n      delete updated[sensorId];\n      return updated;\n    });\n  };\n\n  // Subscribe a new mobile number\n  const handleSubscribe = e => {\n    e.preventDefault();\n    if (!mobileNumber) {\n      alert('Please enter a valid mobile number');\n      return;\n    }\n    const params = {\n      Protocol: 'SMS',\n      TopicArn: topicArn,\n      Endpoint: mobileNumber\n    };\n    sns.subscribe(params, (err, data) => {\n      if (err) {\n        console.error('Error subscribing number:', err);\n        alert('Failed to subscribe the number. Check the console for details.');\n      } else {\n        console.log('Successfully subscribed:', data);\n        setSubscribedNumbers(prev => [...prev, mobileNumber]);\n        setMobileNumber('');\n        alert(`Number ${mobileNumber} subscribed successfully!`);\n      }\n    });\n  };\n\n  // Handle meat assignment\n  const handleAssignMeat = assignment => {\n    setAssignedMeat(prev => [...prev, assignment]);\n  };\n\n  // Remove a meat assignment\n  const handleRemoveMeatAssignment = indexToRemove => {\n    setAssignedMeat(prev => prev.filter((_, index) => index !== indexToRemove));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Smokehouse Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: isSessionActive ? `Session Active (Started: ${sessionStartTime === null || sessionStartTime === void 0 ? void 0 : sessionStartTime.toLocaleString()})` : 'No Active Session'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: isSessionActive ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(SensorDataTable, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Chart, {\n          data: mockData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Alerts, {\n          sensors: mockData,\n          alerts: alerts,\n          onSetAlert: handleSetAlerts,\n          onRemoveAlert: handleRemoveAlert\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Subscribe to Alerts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubscribe,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Mobile Number:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"tel\",\n              value: mobileNumber,\n              onChange: e => setMobileNumber(e.target.value),\n              placeholder: \"+1234567890\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Subscribe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Subscribed Numbers:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: subscribedNumbers.map((number, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: number\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MeatAssignment, {\n          probes: mockProbes,\n          meatTypes: mockMeatTypes,\n          onAssignMeat: handleAssignMeat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Assigned Meat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: assignedMeat.map((assignment, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Probes: \", assignment.probes.join(', '), \" - \", assignment.meat, \" (\", assignment.weight, \" lbs)\", /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                marginLeft: '10px'\n              },\n              onClick: () => handleRemoveMeatAssignment(index),\n              children: \"Remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Waiting for smokehouse to turn on...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6zm9YSKVGoW/lwa9+kQMoyhzQzI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","AWS","SensorDataTable","Chart","Alerts","MeatAssignment","jsxDEV","_jsxDEV","Fragment","_Fragment","config","update","region","sns","SNS","App","_s","mockData","setMockData","isSessionActive","setIsSessionActive","sessionStartTime","setSessionStartTime","lastMessageTime","setLastMessageTime","alerts","setAlerts","mobileNumber","setMobileNumber","subscribedNumbers","setSubscribedNumbers","assignedMeat","setAssignedMeat","topicArn","mockProbes","id","label","mockMeatTypes","name","interval","setInterval","newMessage","value","Math","random","Date","clearInterval","timeout","setTimeout","now","clearTimeout","length","forEach","dataPoint","alert","min","max","message","toFixed","sendAlert","params","Message","TopicArn","publish","err","data","console","error","log","handleSetAlerts","thresholds","prev","handleRemoveAlert","sensorId","updated","handleSubscribe","e","preventDefault","Protocol","Endpoint","subscribe","handleAssignMeat","assignment","handleRemoveMeatAssignment","indexToRemove","filter","_","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleString","sensors","onSetAlert","onRemoveAlert","onSubmit","type","onChange","target","placeholder","required","map","number","probes","meatTypes","onAssignMeat","join","meat","weight","style","marginLeft","onClick","_c","$RefreshReg$"],"sources":["C:/Users/mpatterson/Documents/smokehouse/smokehouse/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport AWS from 'aws-sdk';\r\nimport './App.css';\r\nimport SensorDataTable from './components/SensorDataTable/SensorDataTable';\r\nimport Chart from './components/Chart/Chart';\r\nimport Alerts from './components/Alerts/Alerts';\r\nimport MeatAssignment from './components/MeatAssignment/MeatAssignment';\r\n\r\n// Configure AWS SDK\r\nAWS.config.update({\r\n  region: 'us-east-2', // Update for your AWS region\r\n});\r\n\r\nconst sns = new AWS.SNS();\r\n\r\nfunction App() {\r\n  const [mockData, setMockData] = useState([]);\r\n  const [isSessionActive, setIsSessionActive] = useState(false);\r\n  const [sessionStartTime, setSessionStartTime] = useState(null);\r\n  const [lastMessageTime, setLastMessageTime] = useState(null);\r\n  const [alerts, setAlerts] = useState({});\r\n  const [mobileNumber, setMobileNumber] = useState('');\r\n  const [subscribedNumbers, setSubscribedNumbers] = useState([]);\r\n  const [assignedMeat, setAssignedMeat] = useState([]);\r\n\r\n  const topicArn = 'arn:aws:sns:us-east-2:<account_id>:SmokehouseAlerts'; // Replace <account_id> with your AWS account ID\r\n\r\n  const mockProbes = [\r\n    { id: 'probe1', label: 'Probe 1' },\r\n    { id: 'probe2', label: 'Probe 2' },\r\n    { id: 'probe3', label: 'Probe 3' },\r\n  ];\r\n\r\n  const mockMeatTypes = [\r\n    { id: 1, name: 'Brisket' },\r\n    { id: 2, name: 'Pork Shoulder' },\r\n    { id: 3, name: 'Ribs' },\r\n    { id: 4, name: 'Chicken' },\r\n    { id: 5, name: 'Turkey' },\r\n  ];\r\n\r\n  // Simulate receiving sensor data\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      const newMessage = [\r\n        { id: 'internal_temp', label: 'Internal Temp', value: Math.random() * 100 },\r\n        { id: 'sensor0', label: 'Bottom Temp', value: Math.random() * 100 },\r\n        { id: 'sensor1', label: 'Middle Temp', value: Math.random() * 100 },\r\n        { id: 'sensor2', label: 'Top Temp', value: Math.random() * 100 },\r\n        { id: 'humidity', label: 'Humidity (%)', value: Math.random() * 100 },\r\n        { id: 'smoke_ppm', label: 'Smoke PPM', value: Math.random() * 100 },\r\n      ];\r\n\r\n      setMockData(newMessage); // Replace all mock data with new data for simplicity\r\n      setLastMessageTime(new Date());\r\n\r\n      if (!isSessionActive) {\r\n        setIsSessionActive(true);\r\n        setSessionStartTime(new Date());\r\n      }\r\n    }, 5000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [isSessionActive]);\r\n\r\n  // Handle session timeout\r\n  useEffect(() => {\r\n    if (isSessionActive && lastMessageTime) {\r\n      const timeout = setTimeout(() => {\r\n        const now = new Date();\r\n        if (now - lastMessageTime > 45 * 60 * 1000) {\r\n          setIsSessionActive(false);\r\n        }\r\n      }, 1000);\r\n\r\n      return () => clearTimeout(timeout);\r\n    }\r\n  }, [lastMessageTime, isSessionActive]);\r\n\r\n  // Handle alerts\r\n  useEffect(() => {\r\n    if (isSessionActive && mockData.length > 0) {\r\n      mockData.forEach((dataPoint) => {\r\n        const alert = alerts[dataPoint.id];\r\n        if (alert) {\r\n          if (\r\n            (alert.min !== null && dataPoint.value < alert.min) ||\r\n            (alert.max !== null && dataPoint.value > alert.max)\r\n          ) {\r\n            const message = `${alert.label} value (${dataPoint.value.toFixed(\r\n              2\r\n            )}) breached thresholds: Min (${alert.min}), Max (${alert.max}).`;\r\n            sendAlert(message);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }, [mockData, alerts, isSessionActive]);\r\n\r\n  // Function to send alerts via AWS SNS\r\n  const sendAlert = (message) => {\r\n    const params = {\r\n      Message: message,\r\n      TopicArn: topicArn,\r\n    };\r\n\r\n    sns.publish(params, (err, data) => {\r\n      if (err) {\r\n        console.error('Error sending alert:', err);\r\n      } else {\r\n        console.log('Alert sent:', data);\r\n      }\r\n    });\r\n  };\r\n\r\n  // Add new alert thresholds\r\n  const handleSetAlerts = (thresholds) => {\r\n    setAlerts((prev) => ({ ...prev, ...thresholds }));\r\n  };\r\n\r\n  // Remove an alert\r\n  const handleRemoveAlert = (sensorId) => {\r\n    setAlerts((prev) => {\r\n      const updated = { ...prev };\r\n      delete updated[sensorId];\r\n      return updated;\r\n    });\r\n  };\r\n\r\n  // Subscribe a new mobile number\r\n  const handleSubscribe = (e) => {\r\n    e.preventDefault();\r\n    if (!mobileNumber) {\r\n      alert('Please enter a valid mobile number');\r\n      return;\r\n    }\r\n\r\n    const params = {\r\n      Protocol: 'SMS',\r\n      TopicArn: topicArn,\r\n      Endpoint: mobileNumber,\r\n    };\r\n\r\n    sns.subscribe(params, (err, data) => {\r\n      if (err) {\r\n        console.error('Error subscribing number:', err);\r\n        alert('Failed to subscribe the number. Check the console for details.');\r\n      } else {\r\n        console.log('Successfully subscribed:', data);\r\n        setSubscribedNumbers((prev) => [...prev, mobileNumber]);\r\n        setMobileNumber('');\r\n        alert(`Number ${mobileNumber} subscribed successfully!`);\r\n      }\r\n    });\r\n  };\r\n\r\n  // Handle meat assignment\r\n  const handleAssignMeat = (assignment) => {\r\n    setAssignedMeat((prev) => [...prev, assignment]);\r\n  };\r\n\r\n  // Remove a meat assignment\r\n  const handleRemoveMeatAssignment = (indexToRemove) => {\r\n    setAssignedMeat((prev) => prev.filter((_, index) => index !== indexToRemove));\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Smokehouse Dashboard</h1>\r\n        <p>\r\n          {isSessionActive\r\n            ? `Session Active (Started: ${sessionStartTime?.toLocaleString()})`\r\n            : 'No Active Session'}\r\n        </p>\r\n      </header>\r\n      <main>\r\n        {isSessionActive ? (\r\n          <>\r\n            <SensorDataTable />\r\n            <Chart data={mockData} />\r\n            <Alerts\r\n              sensors={mockData}\r\n              alerts={alerts}\r\n              onSetAlert={handleSetAlerts}\r\n              onRemoveAlert={handleRemoveAlert}\r\n            />\r\n            <h3>Subscribe to Alerts</h3>\r\n            <form onSubmit={handleSubscribe}>\r\n              <label>\r\n                Mobile Number:\r\n                <input\r\n                  type=\"tel\"\r\n                  value={mobileNumber}\r\n                  onChange={(e) => setMobileNumber(e.target.value)}\r\n                  placeholder=\"+1234567890\"\r\n                  required\r\n                />\r\n              </label>\r\n              <button type=\"submit\">Subscribe</button>\r\n            </form>\r\n            <h4>Subscribed Numbers:</h4>\r\n            <ul>\r\n              {subscribedNumbers.map((number, index) => (\r\n                <li key={index}>{number}</li>\r\n              ))}\r\n            </ul>\r\n            <MeatAssignment\r\n              probes={mockProbes}\r\n              meatTypes={mockMeatTypes}\r\n              onAssignMeat={handleAssignMeat}\r\n            />\r\n            <h3>Assigned Meat</h3>\r\n            <ul>\r\n              {assignedMeat.map((assignment, index) => (\r\n                <li key={index}>\r\n                  Probes: {assignment.probes.join(', ')} - {assignment.meat} (\r\n                  {assignment.weight} lbs)\r\n                  <button\r\n                    style={{ marginLeft: '10px' }}\r\n                    onClick={() => handleRemoveMeatAssignment(index)}\r\n                  >\r\n                    Remove\r\n                  </button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </>\r\n        ) : (\r\n          <p>Waiting for smokehouse to turn on...</p>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}